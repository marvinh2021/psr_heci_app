#include <iostream>
#include <fstream>
#include <vector>
#include <string>
extern "C" {
#include "psr_data.h"
}

using namespace std;

static vector<uuid_entry> uuid_list = {
	{"MEI_GUID_PXP", GUID_INIT(0xfbf6fcf1, 0x96cf, 0x4e2e, \
		0xA6, 0xa6, 0x1b, 0xab, 0x8c, 0xbe, 0x36, 0xb1) },
	{"MCA GUID", GUID_INIT(0xdd17041c, 0x09ea, 0x4b17, \
		0xa2, 0x71, 0x5b, 0x98, 0x98, 0x67, 0xec, 0x65) },
	{"PSR_HECI_FIXED_CLIENT_GUID", GUID_INIT(0xEFA2AAA6, 0x0BB6, 0x4194, \
		0xAB, 0xA2, 0x9F, 0x59, 0xA6, 0x75, 0xEE, 0xBA) },
	{"PSR_HECI_DYNAMIC_CLIENT_GUID", GUID_INIT(0xED6703FA, 0xD312, 0x4E8B, \
		0x9D, 0xDD, 0x21, 0x55, 0xBB, 0x2D, 0xEE, 0x65) },
	{"MNG_HECI_CLIENT_GUID", GUID_INIT(0x05B79A6F, 0x4628, 0x4D7F, \
		0x89, 0x9D, 0xA9, 0x15, 0x14, 0xCB, 0x32, 0xAB) },
	{"FIXED_HECI_CLIENT_ASF_GUID", GUID_INIT(0xbb875e12, 0xcb58, 0x4d14, \
		0xae, 0x93, 0x85, 0x66, 0x18, 0x3c, 0x66, 0xc7) },
	{"AMTHI_PROTOCOL_GUID", GUID_INIT(0x12f80028, 0xb4b7, 0x4b2d, \
		0xac, 0xa8, 0x46, 0xe0, 0xff, 0x65, 0x81, 0x4c) },
	{"FIXED_HECI_CLIENT_DROP_SHIP_GUID", GUID_INIT(0x2FD631C9, 0x1309, 0x4FE6, \
		0xBE, 0xC6, 0x85, 0x73, 0x27, 0x78, 0xAB, 0x01) },
	{"FIXED_HECI_CLIENT_HWINV_GUID", GUID_INIT(0x685a4351, 0x6444, 0x7a7d, \
		0x62, 0x61, 0x74, 0x45, 0x51, 0x74, 0x29, 0xa3) },
	{"MEI_HDCP", GUID_INIT(0xB638AB7E, 0x94E2, 0x4EA2, 0xA5, \
		0x52, 0xD1, 0xC5, 0x4B, 0x62, 0x7F, 0x04) },
	{"Unkown 0", GUID_INIT(0xdd17041c, 0x09ea, 0x4b17, \
		0xa2, 0x71, 0x5b, 0x98, 0x98, 0x67, 0xec, 0x65) },
	{"Unkown 1", GUID_INIT(0x082ee5a7, 0x7c25, 0x470a, \
		0x96, 0x43, 0x0c, 0x06, 0xf0, 0x46, 0x6e, 0xa1) },
	{"Unkown 2", GUID_INIT(0x309dcde8, 0xccb1, 0x4062, \
		0x8f, 0x78, 0x60, 0x01, 0x15, 0xa3, 0x43, 0x27) },
};

int main(int argc, const char* argv[])
{
	struct mei_connect_client_data data;

	memset((void *)&data, 0U, sizeof(data));

	for (auto uuid_ent : uuid_list) {
		if (heci_open(&data, &uuid_ent) != -1) {
            cout << endl << uuid_ent.name << ": " << "Version=" <<
                static_cast<int>(data.out_client_properties.protocol_version) << ", " <<
                "MaxLen=" << static_cast<int>(data.out_client_properties.max_msg_length) << endl;
		} else {
            cout << "FAILED!" << endl;
        }
	}

	return 0;
}